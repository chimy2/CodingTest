package blind_recruitment;

public class ParenthesisTransformation {
    public String solution(String p) {
    	/*
1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환
		 */
        String answer = "", v = p, u = "";
        int num=0, before=0;
        boolean check=false;
        if(p.isEmpty()){
            answer="";
        }else{
        	while(answer.length()!=p.length()) {
	            check=false;
	            num=0;
	            u="";
	            for(int i=before;i<v.length();i++){
	                //System.out.println("num="+num+"");
	                if(v.charAt(i) == '(') num++; 
	                else num--;
	                if(num==-1){
	                    check=false;
	                    before=0;
	                }else if(num==1&&check==false) {
	                    check=true;
	                    before=i;
	                }if(num==0 && check==true){
	                	System.out.println(before);
	                	System.out.println(i);
	                    if(before==0) {
		                    u=v.substring(before,i+1);
	                    	System.out.println("1단계");
	                    	v=v.substring(i+1);
	                    }else if(i!=v.length()) {
	                    	System.out.println("2단계");
	                    	u="(";
	                    	for(int j=1;j<before-1;j++) {
	                    		u+=(v.charAt(j)=='(')?')':'(';
	                    	}
	                    	u+=')'+v.substring(before,i+1);
	                    	v=v.substring(i+1,v.length());
//    		                    	v=v.substring(0,before)+v.substring(i+1);
//    		                    }else{
//    		                    	System.out.println("3단계");
//    		                    	v=v.substring(0,before);
	                    }
	                    break;
	                }if(i==v.length()-1) {
	                	System.out.println("4단계");
	                	u="(";
	                	for(int j=1;j<v.length()-1;j++){
	                		u+=(v.charAt(j)=='(')?')':'(';
	                	}
	                	u+=")";
	                	v="";
	                }
	            }
	            answer+=u;
	            System.out.println("v="+v+", u="+u+", answer="+answer);
        	}
        }
        System.out.println(v.substring(0));
        System.out.println("v="+v+", u="+u);
        System.out.println("answer="+answer);
        return answer;
    }
}
